type User @entity {
  id: ID!

  "Blockchain adress of the user"
  address: Bytes!

  "RAYTokens that the user posseses"
  token: [RAYToken!]! @derivedFrom(field: "owner")
}

"This entity represents the positions held by a user in a given Portfolio, along with its' value and all events that modified it"
type RAYToken @entity {
  id: ID!

  "User that owns the RAYToken"
  owner: User!

  "Portfolio associated with the RAYToken"
  portfolio: Portfolio!

  "Latest total value of the RAYToken expressed in the smallest unit of the asset"
  rawValue: BigInt!

  "Latest total value of the RAYToken expressed in the base unit of the asset"
  value: BigDecimal!

  "List of all events which modified this token"
  events: [RAYTokenEvent!]! @derivedFrom(field: "token")

  "Represents the status of the RAYToken. If burnt this will be false"
  isActive: Boolean!
}

type Opportunity @entity {
  id: ID!

  "Portfolio which has this opportunity listed"
  portfolio: Portfolio!

  "Token which reprsents the position of the portfolio on this Opportunity"
  token: OpportunityToken!
}

type Portfolio @entity {
  id: ID!

  asset: Asset!

  "Opportunities which this Portfolio has tokens in"
  opportunities: [Opportunity!]! @derivedFrom(field: "portfolio")
}

type OpportunityToken @entity {
  id: ID!
  opportunities: [Opportunity!]! @derivedFrom(field: "token")
}

# Token events

interface RAYTokenEvent {
  id: ID!
  token: RAYToken!
  rawValue: BigInt!
  value: BigDecimal!

  timestamp: BigInt!
  block: BigInt!
  transaction: Bytes!
}

type DepositEvent implements RAYTokenEvent @entity {
  id: ID!

  "Token which the event modifies"
  token: RAYToken!

  "Value deposited on the position expressed using the smallest unit for the asset. It can be deposited by anyone"
  rawValue: BigInt!

  "Value deposited on the position. It can be deposited by anyone"
  value: BigDecimal!

  "Token value before the event happened"
  tokenRawValueBefore: BigInt!

  "Token value after the event happened"
  tokenRawValueAfter: BigInt!

  "Token value before the event happened"
  tokenValueBefore: BigDecimal!

  "Token value after the event happened"
  tokenValueAfter: BigDecimal!

  "Address from where the value to be added was sent"
  sender: Bytes!

  "Block timestamp of the event"
  timestamp: BigInt!

  "Block number"
  block: BigInt!

  "Transaction hash"
  transaction: Bytes!
}

type WithdrawEvent implements RAYTokenEvent @entity {
  id: ID!

  "Token which the event modifies"
  token: RAYToken!

  "Value withdrawn from the position expressed using the smallest unit for the asset. It can only be withdrawn by the owner"
  rawValue: BigInt!

  "Value withdrawn from the position. It can only be withdrawn by the owner"
  value: BigDecimal!

  "Token value before the event happened"
  tokenRawValueBefore: BigInt!

  "Token value after the event happened"
  tokenRawValueAfter: BigInt!

  "Token value before the event happened"
  tokenValueBefore: BigDecimal!

  "Token value after the event happened"
  tokenValueAfter: BigDecimal!

  "Block timestamp of the event"
  timestamp: BigInt!

  "Block number"
  block: BigInt!

  "Transaction hash"
  transaction: Bytes!
}

type MintEvent implements RAYTokenEvent @entity {
  id: ID!

  "Token which the event modifies"
  token: RAYToken!

  "Value to be used as the initial value of the position expressed using the smallest unit for the asset"
  rawValue: BigInt!

  "Value to be used as the initial value of the position"
  value: BigDecimal!

  "Address which minted the token"
  minter: Bytes!

  "Block timestamp of the event"
  timestamp: BigInt!

  "Block number"
  block: BigInt!

  "Transaction hash"
  transaction: Bytes!
}

type BurnEvent implements RAYTokenEvent @entity {
  id: ID!

  "Token which the event modifies"
  token: RAYToken!

  "Value to be returned to the owner with all fees already paid expressed using the smallest unit for the asset"
  rawValue: BigInt!

  "Value to be returned to the owner with all fees already paid"
  value: BigDecimal!

  "Block timestamp of the event"
  timestamp: BigInt!

  "Block number"
  block: BigInt!

  "Transaction hash"
  transaction: Bytes!
}

# Assets/Coins

type Asset @entity {
  id: ID!

  "Blockchain address of the ERC20token/asset"
  address: Bytes

  "String which represents the name of said asset"
  name: String!

  "Short string representing the symbol used for said asset"
  symbol: String!

  decimals: Int!
}
